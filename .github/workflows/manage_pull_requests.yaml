name: Manage Pull Requests

on:
  workflow_call:
    inputs:
      runner:
        description: "GitHub Runner"
        required: true
        type: string

jobs:
  get_pr_status:
    name: Get PR Status
    runs-on: ${{ inputs.runner }}
    outputs:
      mergeable: ${{ steps.pr_status.outputs.mergeable }}
      draft_state: ${{ steps.pr_status.outputs.draft_state }}

    steps:
      - name: Assess PR Status
        id: pr_status
        uses: actions/github-script@v7
        with:
          script: |
            let mergeable = "false";
            let draftState = core.getInput('is-draft') === "false" ? "false" : "true";
            let reviewState = core.getInput('review-state');
            let labeledWithMerge = core.getInput('labeled-with-merge');

            if (draftState === "true" && labeledWithMerge === "true") {
              mergeable = "true";
            }

            core.setOutput("mergeable", prStatus);
            core.setOutput("draft_state", draftState);
          is-draft: ${{ github.event.pull_request.draft }}
          review-state: ${{ github.event.review.state }}
          labeled-with-merge: ${{ contains(github.event.*.labels.*.name, 'merge') }}

  lint_changed_files:
    name: Lint Changed Files
    needs: get_pr_status
    if: |
      needs.get_pr_status.outputs.draft_state == 'false'
    uses: arghpy/shared-workflows/.github/workflows/lint.yaml@main
    secrets: inherit
    with:
      runner: ${{ inputs.runner }}

  auto_merge:
    name: Auto Merge
    runs-on: ${{ inputs.runner }}
    needs: [lint_changed_files, get_pr_status]
    if: |
      always() &&
      needs.get_pr_status.result == 'success' &&
      needs.get_pr_status.outputs.mergeable == 'true' &&
      needs.lint_changed_files.result == 'success'

    steps:
      - name: Auto-merge
        id: auto_merge
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              merge_method: "rebase"
            });
